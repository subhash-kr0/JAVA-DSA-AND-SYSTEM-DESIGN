class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        // Conversion of an array into an arraylist
         ArrayList<Integer>[] graph = new ArrayList[n];
         for(int i=0; i<n; i++){
             graph[i] = new ArrayList<>();
         }
        
        for(int[] edge:edges){
            int startNode = edge[0];
            int endNode = edge[1];

            graph[startNode].add(endNode);
            graph[endNode].add(startNode);

        }

        return depth_first_search(graph, source, destination, new boolean[n]);
    }

    boolean depth_first_search(ArrayList<Integer>[] graph, int src, int dst, boolean[] visited){
        if(src == dst){
            return true;
        }

        visited[src] = true;

        for(int i=0; i<graph[src].size(); i++){
            int node = graph[src].get(i);
            if(!visited[node]){
                if(depth_first_search(graph, node, dst, visited)){
                    return true;
                }
            }
        }

        return false;
    }
}